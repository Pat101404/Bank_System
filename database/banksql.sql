-- MySQL Script generated by MySQL Workbench
-- Mon Dec 11 09:17:34 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema bank
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema bank
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bank` DEFAULT CHARACTER SET utf8 ;
USE `bank` ;

-- -----------------------------------------------------
-- Table `account_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `account_types` ;

CREATE TABLE IF NOT EXISTS `account_types` (
  `ID_account_type` INT NOT NULL,
  `account_type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID_account_type`),
  UNIQUE INDEX `ID_account_type_UNIQUE` (`ID_account_type` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `accounts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `accounts` ;

CREATE TABLE IF NOT EXISTS `accounts` (
  `ID_account` INT NOT NULL AUTO_INCREMENT,
  `accountname` VARCHAR(45) NOT NULL,
  `passpass` VARCHAR(45) NOT NULL,
  `email` VARCHAR(80) NOT NULL,
  `phone_prefix` VARCHAR(4) NOT NULL,
  `phone_number` VARCHAR(45) NOT NULL,
  `balance` INT NOT NULL,
  `type` VARCHAR(45) NOT NULL,
  `creation_date` DATE NOT NULL,
  `account_type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID_account`),
  UNIQUE INDEX `ID_accounts_UNIQUE` (`ID_account` ASC) VISIBLE,
  INDEX `fk_accounts_account_types1_idx` (`account_type` ASC) VISIBLE,
  CONSTRAINT `fk_accounts_account_types1`
    FOREIGN KEY (`account_type`)
    REFERENCES `account_types` (`ID_account_type`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `users` ;

CREATE TABLE IF NOT EXISTS `users` (
  `ID_user` INT NOT NULL AUTO_INCREMENT,
  `firstname` VARCHAR(45) NOT NULL,
  `lastname` VARCHAR(45) NOT NULL,
  `birthday` DATE NOT NULL,
  `email` VARCHAR(80) NOT NULL,
  `phone_prefix` VARCHAR(4) NOT NULL,
  `phone_number` VARCHAR(45) NOT NULL,
  `city` VARCHAR(45) NOT NULL,
  `street_address` VARCHAR(45) NOT NULL,
  `state` VARCHAR(45) NOT NULL,
  `zipcode` VARCHAR(6) NOT NULL,
  PRIMARY KEY (`ID_user`),
  UNIQUE INDEX `ID_users_UNIQUE` (`ID_user` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `account_user_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `account_user_types` ;

CREATE TABLE IF NOT EXISTS `account_user_types` (
  `ID_account_user_type` INT NOT NULL,
  `account_user_type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID_account_user_type`),
  UNIQUE INDEX `ID_account_user_types_UNIQUE` (`ID_account_user_type` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `accounts_+_users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `accounts_+_users` ;

CREATE TABLE IF NOT EXISTS `accounts_+_users` (
  `ID_account` INT NOT NULL,
  `ID_user` INT NOT NULL,
  `account_user_type` INT NOT NULL,
  PRIMARY KEY (`ID_account`, `ID_user`),
  INDEX `fk_accounts_has_users_users1_idx` (`ID_user` ASC) VISIBLE,
  INDEX `fk_accounts_has_users_accounts_idx` (`ID_account` ASC) VISIBLE,
  INDEX `fk_accounts_+_users_account_user_types1_idx` (`account_user_type` ASC) VISIBLE,
  CONSTRAINT `fk_accounts_has_users_accounts`
    FOREIGN KEY (`ID_account`)
    REFERENCES `accounts` (`ID_account`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_accounts_has_users_users1`
    FOREIGN KEY (`ID_user`)
    REFERENCES `users` (`ID_user`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_accounts_+_users_account_user_types1`
    FOREIGN KEY (`account_user_type`)
    REFERENCES `account_user_types` (`ID_account_user_type`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `card_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `card_types` ;

CREATE TABLE IF NOT EXISTS `card_types` (
  `ID_card_type` INT NOT NULL,
  `card_type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID_card_type`),
  UNIQUE INDEX `ID_card_type_UNIQUE` (`ID_card_type` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `card_brands`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `card_brands` ;

CREATE TABLE IF NOT EXISTS `card_brands` (
  `ID_card_brand` INT NOT NULL,
  `card_brand` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID_card_brand`),
  UNIQUE INDEX `idcard_brand_UNIQUE` (`ID_card_brand` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cards`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cards` ;

CREATE TABLE IF NOT EXISTS `cards` (
  `ID_card` INT NOT NULL AUTO_INCREMENT,
  `ID_account` INT NOT NULL,
  `number` INT NOT NULL,
  `card_type` INT NOT NULL,
  `card_brand` INT NOT NULL,
  `expire_date` DATE NOT NULL,
  `cvv` VARCHAR(3) NOT NULL,
  PRIMARY KEY (`ID_card`, `ID_account`),
  INDEX `fk_cards_accounts1_idx` (`ID_account` ASC) VISIBLE,
  INDEX `fk_cards_card_type1_idx` (`card_type` ASC) VISIBLE,
  UNIQUE INDEX `ID_card_UNIQUE` (`ID_card` ASC) VISIBLE,
  INDEX `fk_cards_card_brand1_idx` (`card_brand` ASC) VISIBLE,
  CONSTRAINT `fk_cards_accounts1`
    FOREIGN KEY (`ID_account`)
    REFERENCES `accounts` (`ID_account`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cards_card_type1`
    FOREIGN KEY (`card_type`)
    REFERENCES `card_types` (`ID_card_type`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cards_card_brand1`
    FOREIGN KEY (`card_brand`)
    REFERENCES `card_brands` (`ID_card_brand`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `transation_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `transation_types` ;

CREATE TABLE IF NOT EXISTS `transation_types` (
  `ID_transation_type` INT NOT NULL,
  `transaction_type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID_transation_type`),
  UNIQUE INDEX `ID_transation_types_UNIQUE` (`ID_transation_type` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `transaction_status_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `transaction_status_types` ;

CREATE TABLE IF NOT EXISTS `transaction_status_types` (
  `ID_status_type` INT NOT NULL,
  `transaction_status_type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID_status_type`),
  UNIQUE INDEX `ID_transaction_status_types_UNIQUE` (`ID_status_type` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `transaction_log`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `transaction_log` ;

CREATE TABLE IF NOT EXISTS `transaction_log` (
  `ID_transaction_log` INT NOT NULL AUTO_INCREMENT,
  `ID_sender` INT NOT NULL,
  `ID_recipient` INT NOT NULL,
  `time` DATETIME NOT NULL,
  `amount` INT NOT NULL,
  `transation_type` INT NOT NULL,
  `ID_card` INT NULL,
  `transaction_status_type` INT NOT NULL,
  PRIMARY KEY (`ID_transaction_log`, `ID_sender`, `ID_recipient`),
  UNIQUE INDEX `ID_transaction_log_UNIQUE` (`ID_transaction_log` ASC) VISIBLE,
  INDEX `fk_transaction_log_accounts1_idx` (`ID_sender` ASC) VISIBLE,
  INDEX `fk_transaction_log_accounts2_idx` (`ID_recipient` ASC) VISIBLE,
  INDEX `fk_transaction_log_transation_types1_idx` (`transation_type` ASC) VISIBLE,
  INDEX `fk_transaction_log_cards1_idx` (`ID_card` ASC) VISIBLE,
  INDEX `fk_transaction_log_transaction_status_types1_idx` (`transaction_status_type` ASC) VISIBLE,
  CONSTRAINT `fk_transaction_log_accounts1`
    FOREIGN KEY (`ID_sender`)
    REFERENCES `accounts` (`ID_account`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transaction_log_accounts2`
    FOREIGN KEY (`ID_recipient`)
    REFERENCES `accounts` (`ID_account`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transaction_log_transation_types1`
    FOREIGN KEY (`transation_type`)
    REFERENCES `transation_types` (`ID_transation_type`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transaction_log_cards1`
    FOREIGN KEY (`ID_card`)
    REFERENCES `cards` (`ID_card`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transaction_log_transaction_status_types1`
    FOREIGN KEY (`transaction_status_type`)
    REFERENCES `transaction_status_types` (`ID_status_type`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `card_limits`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `card_limits` ;

CREATE TABLE IF NOT EXISTS `card_limits` (
  `ID_card` INT NOT NULL,
  `limt_atm` INT NOT NULL,
  `limit_atm_used` INT NOT NULL,
  `limit_card` INT NOT NULL,
  `limit_card_used` INT NOT NULL,
  `limit_web` INT NOT NULL,
  `limit_web_used` INT NOT NULL,
  `limit_total` INT NOT NULL,
  `limit_total_used` INT NOT NULL,
  PRIMARY KEY (`ID_card`),
  CONSTRAINT `fk_card_limits_cards1`
    FOREIGN KEY (`ID_card`)
    REFERENCES `cards` (`ID_card`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- -----------------------------------------------------
-- procedure creation
-- -----------------------------------------------------

DELIMITER $$

CREATE PROCEDURE find_account_data(IN id INT)
BEGIN
  SELECT * FROM accounts WHERE ID_account = id;
END $$
CREATE PROCEDURE find_account_type(IN id INT)
BEGIN
  SELECT account_type FROM account_types WHERE ID_account_type = id;
END $$

CREATE PROCEDURE find_user_data(IN id INT)
BEGIN
  SELECT * FROM users WHERE ID_user = id;
END $$

CREATE PROCEDURE find_account_user_type(IN id INT)
BEGIN
  SELECT * FROM account_user_types WHERE ID_account_user_type = id;
END $$

CREATE PROCEDURE find_account_owner_ID(IN id INT)
BEGIN
  SELECT ID_user FROM `accounts_+_users` WHERE ID_account = id AND account_user_type = 1;
END $$
CREATE PROCEDURE find_account_user_ID(IN id INT)
BEGIN
  SELECT ID_user FROM `accounts_+_users` WHERE ID_account = id AND NOT account_user_type = 1;
END $$

CREATE PROCEDURE find_card_data(IN id INT)
BEGIN
  SELECT * FROM cards WHERE ID_card = id;
END $$
CREATE PROCEDURE find_card_brand(IN id INT)
BEGIN
  SELECT card_brand FROM card_brands WHERE ID_card_brand = id;
END $$
CREATE PROCEDURE find_card_type(IN id INT)
BEGIN
  SELECT card_type FROM card_types WHERE ID_card_type = id;
END $$

CREATE PROCEDURE find_transaction_log_by_sender(IN id INT)
BEGIN
  SELECT * FROM transaction_log WHERE ID_sender = id;
END $$
CREATE PROCEDURE find_transaction_log_by_recipient(IN id INT)
BEGIN
  SELECT * FROM transaction_log WHERE ID_recipient = id;
END $$
CREATE PROCEDURE find_transaction_log_by_datetime(IN t DATETIME)
BEGIN
  SELECT * FROM transaction_log WHERE `time` = t;
END $$
CREATE PROCEDURE find_transaction_type(IN id INT)
BEGIN
  SELECT transaction_type FROM transaction_types WHERE ID_transaction_type = id;
END $$
CREATE PROCEDURE find_transaction_status_type(IN id INT)
BEGIN
  SELECT transaction_status_type FROM transaction_status_types WHERE ID_transaction_status_type = id;
END $$

CREATE PROCEDURE find_ID_account_from_login(IN mail VARCHAR(80), IN pass VARCHAR(45))
BEGIN
  SELECT ID_account FROM accounts WHERE email = mail AND passpass = pass;
END $$

DELIMITER ;

INSERT INTO account_types (ID_account_type, account_type) VALUES
(1, "admin"),
(2, "manager"),
(3, "emplyee"),
(4, "vip"),
(5, "bussiness"),
(6, "basic");

INSERT INTO accounts (account_name, passpass, email, phone_prefix, phone_number, balance, account_type, creation_date) VALUES 
("admin-acc1", "admin1pass", "admin1@flowbank.com", "+420", "111 111 111", 100000, 1, "2020-01-01"),
("manager-acc1", "manager1pass", "manager1@flowbank.com", "+420", "222 222 222", 200000, 2, "2020-01-01"),
("employee-acc1", "employee1pass", "employee1@flowbank.com", "+420", "333 333 333", 10000, 3, "2020-01-01"),
("test-acc1", "test1pass", "test1@email.com", "+420", "444 444 444", 2500000, 4, "2020-01-01"),
("test-acc2", "test2pass", "test2@email.com", "+420", "555 555 555", 1200000, 5, "2020-01-01"),
("test-acc2", "test2pass", "test2@email.com", "+420", "555 555 555", 50000, 6, "2020-01-01");

INSERT INTO users (firstname, lastname, birthday, email, phone_prefix, phone_number, city, street_address, `state`, zipcode) VALUES
("admin", "name", "2000-01-01", "admin1@flowbank.com", "+420", "111 111 111", "Prague", "U šourků 69", "Pražský kraj", "10 000"),
("manager", "name", "2000-01-01", "manager1@flowbank.com", "+420", "222 222 222", "Prague", "U šourků 69", "Pražský kraj", "10 000"),
("employee", "name", "2000-01-01", "employee1@flowbank.com", "+420", "333 333 333", "Prague", "U šourků 69", "Pražský kraj", "10 000"),
("testuser", "#1", "1990-01-01", "test1@email.com", "+420", "444 444 444", "City#1", "street 11", "kraj#1", "11 111"),
("testuser", "#2", "1980-01-01", "test2@email.com", "+420", "555 555 555", "City#2", "street 12", "kraj#1", "22 222"),
("testuser", "#3", "1985-01-01", "test3@email.com", "+420", "666 666 666", "City#3", "street 13", "kraj#1", "33 333"),
("testuser", "#4", "1979-01-01", "test4@email.com", "+420", "777 777 777", "City#4", "street 14", "kraj#1", "44 444");

INSERT INTO account_user_types (ID_account_user_type, account_user_type) VALUES
(1, "owner"),
(2, "co-owner"),
(3, "user");

INSERT INTO `accounts_+_users` (ID_account, ID_user, account_user_type) VALUES
(1, 1, 1),
(2, 2, 1),
(3, 3, 1),
(4, 4, 1),
(5, 5, 1),
(5, 6, 2),
(6, 7, 1);

INSERT INTO card_types (ID_card_type, card_type) VALUES
(1, "debit"),
(2, "credit");

INSERT INTO card_brands (ID_card_brand, card_brand) VALUES
(1, "mastercard"),
(2, "visa");

INSERT INTO cards (ID_account, card_number, card_type, card_brand, expire_date, cvv) VALUES
(1, 1111111111111111, 1, 2, "2025-05-01", 111),
(2, 2222222222222222, 1, 2, "2025-05-01", 222),
(2, 3333333333333333, 2, 1, "2025-05-01", 333),
(3, 4444444444444444, 1, 2, "2025-05-01", 444),
(4, 5555555555555555, 1, 2, "2025-05-01", 555),
(4, 6666666666666666, 2, 1, "2025-05-01", 666),
(5, 7777777777777777, 1, 2, "2025-05-01", 777),
(5, 8888888888888888, 2, 1, "2025-05-01", 888),
(6, 9999999999999999, 1, 2, "2025-05-01", 999);

INSERT INTO card_limits (ID_card, limit_atm, limit_atm_used, limit_card, limi_card_used, limit_web, limit_web_used, limit_total, limit_total_used) VALUES
(1, 0, 0, 0, 0, 0, 0, 0, 0),
(2, 500, 0, 10000, 0, 10000, 0, 100000, 0),
(3, 500, 0, 5000, 0, 5000, 0, 50000, 0),
(4, 500, 0, 1000, 0, 1000, 0, 4000, 0),
(5, 500, 0, 10000, 0, 10000, 0, 100000, 0),
(6, 500, 0, 7500, 0, 7500, 0, 75000, 0),
(7, 500, 0, 20000, 0, 20000, 0, 200000, 0),
(8, 500, 0, 10000, 0, 10000, 0, 100000, 0),
(9, 500, 0, 500, 0, 500, 0, 2000, 0);